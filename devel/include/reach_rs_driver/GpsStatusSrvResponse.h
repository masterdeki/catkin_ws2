// Generated by gencpp from file reach_rs_driver/GpsStatusSrvResponse.msg
// DO NOT EDIT!


#ifndef REACH_RS_DRIVER_MESSAGE_GPSSTATUSSRVRESPONSE_H
#define REACH_RS_DRIVER_MESSAGE_GPSSTATUSSRVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/NavSatStatus.h>

namespace reach_rs_driver
{
template <class ContainerAllocator>
struct GpsStatusSrvResponse_
{
  typedef GpsStatusSrvResponse_<ContainerAllocator> Type;

  GpsStatusSrvResponse_()
    : gps_connected(false)
    , latitude(0.0)
    , longitude(0.0)
    , status()  {
    }
  GpsStatusSrvResponse_(const ContainerAllocator& _alloc)
    : gps_connected(false)
    , latitude(0.0)
    , longitude(0.0)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _gps_connected_type;
  _gps_connected_type gps_connected;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef  ::sensor_msgs::NavSatStatus_<ContainerAllocator>  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GpsStatusSrvResponse_

typedef ::reach_rs_driver::GpsStatusSrvResponse_<std::allocator<void> > GpsStatusSrvResponse;

typedef boost::shared_ptr< ::reach_rs_driver::GpsStatusSrvResponse > GpsStatusSrvResponsePtr;
typedef boost::shared_ptr< ::reach_rs_driver::GpsStatusSrvResponse const> GpsStatusSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator1> & lhs, const ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.gps_connected == rhs.gps_connected &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator1> & lhs, const ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reach_rs_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a4db83181fcb1e5355d5efa1e2f87a9";
  }

  static const char* value(const ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a4db83181fcb1e5ULL;
  static const uint64_t static_value2 = 0x355d5efa1e2f87a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reach_rs_driver/GpsStatusSrvResponse";
  }

  static const char* value(const ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool gps_connected\n"
"float64 latitude\n"
"float64 longitude\n"
"sensor_msgs/NavSatStatus status\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/NavSatStatus\n"
"# Navigation Satellite fix status for any Global Navigation Satellite System\n"
"\n"
"# Whether to output an augmented fix is determined by both the fix\n"
"# type and the last time differential corrections were received.  A\n"
"# fix is valid when status >= STATUS_FIX.\n"
"\n"
"int8 STATUS_NO_FIX =  -1        # unable to fix position\n"
"int8 STATUS_FIX =      0        # unaugmented fix\n"
"int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\n"
"int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n"
"\n"
"int8 status\n"
"\n"
"# Bits defining which Global Navigation Satellite System signals were\n"
"# used by the receiver.\n"
"\n"
"uint16 SERVICE_GPS =     1\n"
"uint16 SERVICE_GLONASS = 2\n"
"uint16 SERVICE_COMPASS = 4      # includes BeiDou.\n"
"uint16 SERVICE_GALILEO = 8\n"
"\n"
"uint16 service\n"
;
  }

  static const char* value(const ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps_connected);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsStatusSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reach_rs_driver::GpsStatusSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "gps_connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_connected);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::sensor_msgs::NavSatStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REACH_RS_DRIVER_MESSAGE_GPSSTATUSSRVRESPONSE_H
