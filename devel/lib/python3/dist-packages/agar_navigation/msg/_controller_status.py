# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agar_navigation/controller_status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class controller_status(genpy.Message):
  _md5sum = "f2b5f9baff5f33fa53ee6143b7658a03"
  _type = "agar_navigation/controller_status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 rpm
uint16 phaseCurrent
uint8 batteryVoltage
uint8 controllerTemp
bool reverse
uint8 brakePedal
uint8 brakeSwitch
uint8 footSwitch"""
  __slots__ = ['rpm','phaseCurrent','batteryVoltage','controllerTemp','reverse','brakePedal','brakeSwitch','footSwitch']
  _slot_types = ['uint16','uint16','uint8','uint8','bool','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rpm,phaseCurrent,batteryVoltage,controllerTemp,reverse,brakePedal,brakeSwitch,footSwitch

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(controller_status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rpm is None:
        self.rpm = 0
      if self.phaseCurrent is None:
        self.phaseCurrent = 0
      if self.batteryVoltage is None:
        self.batteryVoltage = 0
      if self.controllerTemp is None:
        self.controllerTemp = 0
      if self.reverse is None:
        self.reverse = False
      if self.brakePedal is None:
        self.brakePedal = 0
      if self.brakeSwitch is None:
        self.brakeSwitch = 0
      if self.footSwitch is None:
        self.footSwitch = 0
    else:
      self.rpm = 0
      self.phaseCurrent = 0
      self.batteryVoltage = 0
      self.controllerTemp = 0
      self.reverse = False
      self.brakePedal = 0
      self.brakeSwitch = 0
      self.footSwitch = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2H6B().pack(_x.rpm, _x.phaseCurrent, _x.batteryVoltage, _x.controllerTemp, _x.reverse, _x.brakePedal, _x.brakeSwitch, _x.footSwitch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.rpm, _x.phaseCurrent, _x.batteryVoltage, _x.controllerTemp, _x.reverse, _x.brakePedal, _x.brakeSwitch, _x.footSwitch,) = _get_struct_2H6B().unpack(str[start:end])
      self.reverse = bool(self.reverse)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2H6B().pack(_x.rpm, _x.phaseCurrent, _x.batteryVoltage, _x.controllerTemp, _x.reverse, _x.brakePedal, _x.brakeSwitch, _x.footSwitch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.rpm, _x.phaseCurrent, _x.batteryVoltage, _x.controllerTemp, _x.reverse, _x.brakePedal, _x.brakeSwitch, _x.footSwitch,) = _get_struct_2H6B().unpack(str[start:end])
      self.reverse = bool(self.reverse)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H6B = None
def _get_struct_2H6B():
    global _struct_2H6B
    if _struct_2H6B is None:
        _struct_2H6B = struct.Struct("<2H6B")
    return _struct_2H6B
