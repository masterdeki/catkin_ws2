#!/usr/bin/env python3

import rospy

from enum import Enum
from rpiplc_lib import rpiplc

class motor_direction(Enum):
    FORWARD = 0
    BACKWARD = 1
    NEUTRAL = 2
    TENK_LEFT = 3
    TENK_RIGHT = 4
    LEFT = 5
    RIGHT = 6

class motor_driver(object):
    def __init__(self, motor_speed = 512, tank_speed = 512, analog_brake_fl = 0, analog_brake_rl = 0, analog_brake_fr = 0, analog_brake_rr = 0):
        rpiplc.init("RPIPLC_53ARR")

        self.pin_spd_fl = "A1.1"
        self.pin_frw_fl = "R1.4"
        self.pin_bkw_fl = "R1.5"
        self.pin_bra_fl = "A2.0"
        self.pin_brd_fl = "Q0.2"

        self.pin_spd_rl = "A0.5"
        self.pin_frw_rl = "R1.2"
        self.pin_bkw_rl = "R1.1"
        self.pin_bra_rl = "A2.1"
        self.pin_brd_rl = "Q0.1"

        self.pin_spd_fr = "A1.0"
        self.pin_frw_fr = "R2.4"
        self.pin_bkw_fr = "R2.5"
        self.pin_bra_fr = "A0.7"
        self.pin_brd_fr = "Q0.3"

        self.pin_spd_rr = "A0.6"
        self.pin_frw_rr = "R2.2"
        self.pin_bkw_rr = "R2.1"
        self.pin_bra_rr = "A1.2"
        self.pin_brd_rr = "Q0.0"

        self.__init_pin(self.pin_spd_fl, self.pin_frw_fl, self.pin_bkw_fl, self.pin_bra_fl, self.pin_brd_fl)
        self.__init_pin(self.pin_spd_rl, self.pin_frw_rl, self.pin_bkw_rl, self.pin_bra_rl, self.pin_brd_rl)
        self.__init_pin(self.pin_spd_fr, self.pin_frw_fr, self.pin_bkw_fr, self.pin_bra_fr, self.pin_brd_fr)
        self.__init_pin(self.pin_spd_rr, self.pin_frw_rr, self.pin_bkw_rr, self.pin_bra_rr, self.pin_brd_rr)

        self.max_speed = 1024
        self.min_speed = 200

        self.motor_speed = motor_speed
        self.tank_speed = tank_speed

        self.analog_brake_fl = analog_brake_fl
        self.analog_brake_rl = analog_brake_rl
        self.analog_brake_fr = analog_brake_fr
        self.analog_brake_rr = analog_brake_rr

        self.release_all_brakes()
        self.release_all_analog_brakes()


    def __init_pin(self, speed, forward, backward, analog_brake, digital_brake):
        rpiplc.pin_mode(speed, rpiplc.OUTPUT)
        rpiplc.pin_mode(forward, rpiplc.OUTPUT)
        rpiplc.pin_mode(backward, rpiplc.OUTPUT)
        rpiplc.pin_mode(analog_brake, rpiplc.OUTPUT)
        rpiplc.pin_mode(digital_brake, rpiplc.OUTPUT)

    def __control_motor(self, speed, direction, pin_speed, pin_forward, pin_backward):
        if speed == 0:
            rpiplc.digital_write(pin_forward, rpiplc.LOW)
            rpiplc.digital_write(pin_backward, rpiplc.LOW)
            rpiplc.analog_write(pin_speed, 0)
        elif direction == motor_direction.BACKWARD:
            rpiplc.digital_write(pin_forward, rpiplc.LOW)
            rpiplc.digital_write(pin_backward, rpiplc.HIGH)
            rpiplc.analog_write(pin_speed, int(speed))
        else:
            rpiplc.digital_write(pin_forward, rpiplc.HIGH)
            rpiplc.digital_write(pin_backward, rpiplc.LOW)
            rpiplc.analog_write(pin_speed, int(speed))

    def __control_digital_brake(self, brake, brake_pin):
        if brake == True:
            rpiplc.digital_write(brake_pin, rpiplc.HIGH)
        else:
            rpiplc.digital_write(brake_pin, rpiplc.LOW)

    def __control_analog_brake(self, brake, brake_pin):
        if brake == 0:
            rpiplc.analog_write(brake_pin, 0)
        else:
            rpiplc.analog_write(brake_pin, brake)


    def set_speed(self, motor_speed, tank_speed, min_speed):
        print('New speeds received. Motor speed: {0}, tank speed: {1}, minimum speed: {2}'.format(motor_speed, tank_speed, min_speed))
        self.motor_speed = motor_speed
        self.tank_speed = tank_speed
        self.min_speed = min_speed

    def set_analog_brakes_speed(self, front_left = 0, rear_left = 0, front_right = 0, rear_right = 0):
        print('New analog brakes received. Front left: {0}, rear left: {1}, front right: {2}, rear right: {3}'
              .format(front_left, rear_left, front_right, rear_right))
        self.analog_brake_fl = front_left
        self.analog_brake_rl = rear_left
        self.analog_brake_fr = front_right
        self.analog_brake_rr = rear_right

    def stop(self):
        self.move(0, 0, 0, 0, 0, 0, 0, 0)

    def brake(self, front_left, rear_left, front_right, rear_right):
        self.__control_digital_brake(front_left, self.pin_brd_fl)
        self.__control_digital_brake(rear_left, self.pin_brd_rl)
        self.__control_digital_brake(front_right, self.pin_brd_fr)
        self.__control_digital_brake(rear_right, self.pin_brd_rr)

    def brake_analog(self, front_left_strength, rear_left_strength, front_right_strength, rear_right_strength):
        self.__control_analog_brake(front_left_strength, self.pin_bra_fl)
        self.__control_analog_brake(rear_left_strength, self.pin_bra_rl)
        self.__control_analog_brake(front_right_strength, self.pin_bra_fr)
        self.__control_analog_brake(rear_right_strength, self.pin_bra_rr)


    def activate_all_brakes(self):
        self.brake(True, True, True, True)

    def release_all_brakes(self):
        self.brake(False, False, False, False)

    def activate_all_analog_brakes(self):
        self.brake_analog(self.max_speed, self.max_speed, self.max_speed, self.max_speed)

    def activate_all_analog_brakes_controlled_speed(self):
        self.brake_analog(self.analog_brake_fl, self.analog_brake_rl, self.analog_brake_fr, self.analog_brake_rr)

    def release_all_analog_brakes(self):
        self.brake_analog(0, 0, 0, 0)


    def move_by_side(self, left_speed, left_direction, right_speed, right_direction):
        self.move(left_speed, left_direction, left_speed, left_direction,
                  right_speed, right_direction, right_speed, right_direction)

    def move(self, front_left_speed, front_left_direction, rear_left_speed, rear_left_direction, 
             front_right_speed, front_right_direction, rear_right_speed, rear_right_direction):
        self.__control_motor(front_left_speed, front_left_direction, self.pin_spd_fl, self.pin_frw_fl, self.pin_bkw_fl)
        self.__control_motor(rear_left_speed, rear_left_direction, self.pin_spd_rl, self.pin_frw_rl, self.pin_bkw_rl)
        self.__control_motor(front_right_speed, front_right_direction, self.pin_spd_fr, self.pin_frw_fr, self.pin_bkw_fr)
        self.__control_motor(rear_right_speed, rear_right_direction, self.pin_spd_rr, self.pin_frw_rr, self.pin_bkw_rr)
    
    
    
    def move_by_velocity(self, linear_velocity, angular_velocity):
        
        base_width = 1.09972
        minSpeed = 0.27028

        linear_velocity = linear_velocity * (self.motor_speed / 100) 


        tempRight = abs(1.0 * linear_velocity + angular_velocity * base_width / 2) 
        tempLeft = abs(1.0 * linear_velocity - angular_velocity * base_width / 2)

        if tempRight > tempLeft and tempRight > 1.37:
            diff = 1.37 - tempRight
            tempRight = 1.37
            tempLeft = tempLeft + diff
        elif tempRight > tempLeft and tempLeft < minSpeed:
            diff = minSpeed - tempLeft
            tempLeft = minSpeed
            tempRight = tempRight + diff
        elif tempLeft > tempRight and tempLeft > 1.37:
            diff = 1.37 - tempLeft
            tempLeft = 1.37
            tempRight = tempRight + diff
        elif tempLeft > tempRight and tempRight < minSpeed:
            diff = minSpeed - tempRight
            tempRight = minSpeed
            tempLeft = tempLeft + diff
        


        if linear_velocity == 0 and abs(angular_velocity) != 0:
            if angular_velocity > 0:
                left_wheels_direction = motor_direction.BACKWARD
                right_wheels_direction = motor_direction.FORWARD
            else:
                left_wheels_direction = motor_direction.FORWARD
                right_wheels_direction = motor_direction.BACKWARD
        else:
            if linear_velocity < 0:
                left_wheels_direction = right_wheels_direction = motor_direction.BACKWARD
            else:
                left_wheels_direction = right_wheels_direction = motor_direction.FORWARD


        segment = 1.37 / 1024

        left_wheels_speed = tempLeft / segment
        right_wheels_speed = tempRight / segment

        if linear_velocity != 0 and angular_velocity > 0:
            self.brake_analog(self.analog_brake_fl, self.analog_brake_rl, 0, 0)
        elif linear_velocity != 0 and angular_velocity < 0:
            self.brake_analog(0, 0, self.analog_brake_fr, self.analog_brake_rr)
        else:
            self.release_all_analog_brakes()

        #rospy.loginfo('Left wheels speed: {0}, right wheels speed: {1}'.format(left_wheels_speed, right_wheels_speed))

        self.move_by_side(left_wheels_speed, left_wheels_direction, right_wheels_speed, right_wheels_direction)

        
        # if linear_velocity == 0 and abs(angular_velocity) != 0:
        #     left_wheels_speed = right_wheels_speed = (self.max_speed * self.tank_speed / 100) * abs(angular_velocity)

        #     if left_wheels_speed < self.min_speed:
        #         left_wheels_speed = right_wheels_speed = self.min_speed

        #     if angular_velocity > 0:
        #         left_wheels_direction = motor_direction.BACKWARD
        #         right_wheels_direction = motor_direction.FORWARD
        #     else:
        #         left_wheels_direction = motor_direction.FORWARD
        #         right_wheels_direction = motor_direction.BACKWARD
        # else:
        #     rot_left = abs(angular_velocity) if angular_velocity > 0 else 0
        #     rot_right = abs(angular_velocity) if angular_velocity < 0 else 0

        #     max_speed = (self.max_speed * self.motor_speed / 100)

        #     left_wheels_speed = max_speed * abs(linear_velocity) - max_speed * rot_left
        #     right_wheels_speed = max_speed * abs(linear_velocity) - max_speed * rot_right

        #     if rot_left > 0 and left_wheels_speed < self.min_speed:
        #         left_wheels_speed = self.min_speed
        #     if rot_right > 0 and right_wheels_speed < self.min_speed:
        #         right_wheels_speed = self.min_speed

        #     # if cmd_z > 0:
        #     #     motor.brake_analog(brake_speed, 0, brake_speed, 0)
        #     # elif cmd_z < 0:
        #     #     motor.brake_analog(0, brake_speed, 0, brake_speed)
        #     # else:
        #     #     motor.brake_analog(0, 0, 0, 0)

        #     if linear_velocity < 0:
        #         left_wheels_direction = right_wheels_direction = motor_direction.BACKWARD
        #     else:
        #         left_wheels_direction = right_wheels_direction = motor_direction.FORWARD

        #self.move_by_side(left_wheels_speed, left_wheels_direction, right_wheels_speed, right_wheels_direction)


