// Generated by gencpp from file agar_navigation/AutoMoveSaveRequest.msg
// DO NOT EDIT!


#ifndef AGAR_NAVIGATION_MESSAGE_AUTOMOVESAVEREQUEST_H
#define AGAR_NAVIGATION_MESSAGE_AUTOMOVESAVEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agar_navigation
{
template <class ContainerAllocator>
struct AutoMoveSaveRequest_
{
  typedef AutoMoveSaveRequest_<ContainerAllocator> Type;

  AutoMoveSaveRequest_()
    : auto_move(false)  {
    }
  AutoMoveSaveRequest_(const ContainerAllocator& _alloc)
    : auto_move(false)  {
  (void)_alloc;
    }



   typedef uint8_t _auto_move_type;
  _auto_move_type auto_move;





  typedef boost::shared_ptr< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AutoMoveSaveRequest_

typedef ::agar_navigation::AutoMoveSaveRequest_<std::allocator<void> > AutoMoveSaveRequest;

typedef boost::shared_ptr< ::agar_navigation::AutoMoveSaveRequest > AutoMoveSaveRequestPtr;
typedef boost::shared_ptr< ::agar_navigation::AutoMoveSaveRequest const> AutoMoveSaveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator1> & lhs, const ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator2> & rhs)
{
  return lhs.auto_move == rhs.auto_move;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator1> & lhs, const ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agar_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0901aaacd54af27e266977a3508c4f87";
  }

  static const char* value(const ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0901aaacd54af27eULL;
  static const uint64_t static_value2 = 0x266977a3508c4f87ULL;
};

template<class ContainerAllocator>
struct DataType< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agar_navigation/AutoMoveSaveRequest";
  }

  static const char* value(const ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool auto_move\n"
;
  }

  static const char* value(const ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.auto_move);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutoMoveSaveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agar_navigation::AutoMoveSaveRequest_<ContainerAllocator>& v)
  {
    s << indent << "auto_move: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_move);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGAR_NAVIGATION_MESSAGE_AUTOMOVESAVEREQUEST_H
