// Generated by gencpp from file agar_navigation/RobotSpeedSaveResponse.msg
// DO NOT EDIT!


#ifndef AGAR_NAVIGATION_MESSAGE_ROBOTSPEEDSAVERESPONSE_H
#define AGAR_NAVIGATION_MESSAGE_ROBOTSPEEDSAVERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agar_navigation
{
template <class ContainerAllocator>
struct RobotSpeedSaveResponse_
{
  typedef RobotSpeedSaveResponse_<ContainerAllocator> Type;

  RobotSpeedSaveResponse_()
    : saved(false)  {
    }
  RobotSpeedSaveResponse_(const ContainerAllocator& _alloc)
    : saved(false)  {
  (void)_alloc;
    }



   typedef uint8_t _saved_type;
  _saved_type saved;





  typedef boost::shared_ptr< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RobotSpeedSaveResponse_

typedef ::agar_navigation::RobotSpeedSaveResponse_<std::allocator<void> > RobotSpeedSaveResponse;

typedef boost::shared_ptr< ::agar_navigation::RobotSpeedSaveResponse > RobotSpeedSaveResponsePtr;
typedef boost::shared_ptr< ::agar_navigation::RobotSpeedSaveResponse const> RobotSpeedSaveResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator1> & lhs, const ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator2> & rhs)
{
  return lhs.saved == rhs.saved;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator1> & lhs, const ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agar_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0d3810ee720d0cb544e6a5f0d6991e9";
  }

  static const char* value(const ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0d3810ee720d0cbULL;
  static const uint64_t static_value2 = 0x544e6a5f0d6991e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agar_navigation/RobotSpeedSaveResponse";
  }

  static const char* value(const ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool saved\n"
;
  }

  static const char* value(const ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.saved);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotSpeedSaveResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agar_navigation::RobotSpeedSaveResponse_<ContainerAllocator>& v)
  {
    s << indent << "saved: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.saved);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGAR_NAVIGATION_MESSAGE_ROBOTSPEEDSAVERESPONSE_H
