// Generated by gencpp from file agar_navigation/RobotStatusSrvResponse.msg
// DO NOT EDIT!


#ifndef AGAR_NAVIGATION_MESSAGE_ROBOTSTATUSSRVRESPONSE_H
#define AGAR_NAVIGATION_MESSAGE_ROBOTSTATUSSRVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agar_navigation
{
template <class ContainerAllocator>
struct RobotStatusSrvResponse_
{
  typedef RobotStatusSrvResponse_<ContainerAllocator> Type;

  RobotStatusSrvResponse_()
    : auto_move(false)
    , robot_speed(0)
    , tenk_speed(0)
    , imu_connected(false)
    , imu_model_name()  {
    }
  RobotStatusSrvResponse_(const ContainerAllocator& _alloc)
    : auto_move(false)
    , robot_speed(0)
    , tenk_speed(0)
    , imu_connected(false)
    , imu_model_name(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _auto_move_type;
  _auto_move_type auto_move;

   typedef int16_t _robot_speed_type;
  _robot_speed_type robot_speed;

   typedef int16_t _tenk_speed_type;
  _tenk_speed_type tenk_speed;

   typedef uint8_t _imu_connected_type;
  _imu_connected_type imu_connected;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _imu_model_name_type;
  _imu_model_name_type imu_model_name;





  typedef boost::shared_ptr< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStatusSrvResponse_

typedef ::agar_navigation::RobotStatusSrvResponse_<std::allocator<void> > RobotStatusSrvResponse;

typedef boost::shared_ptr< ::agar_navigation::RobotStatusSrvResponse > RobotStatusSrvResponsePtr;
typedef boost::shared_ptr< ::agar_navigation::RobotStatusSrvResponse const> RobotStatusSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator1> & lhs, const ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.auto_move == rhs.auto_move &&
    lhs.robot_speed == rhs.robot_speed &&
    lhs.tenk_speed == rhs.tenk_speed &&
    lhs.imu_connected == rhs.imu_connected &&
    lhs.imu_model_name == rhs.imu_model_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator1> & lhs, const ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agar_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a31bc4a504f5eb9e3c4b51e387fba977";
  }

  static const char* value(const ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa31bc4a504f5eb9eULL;
  static const uint64_t static_value2 = 0x3c4b51e387fba977ULL;
};

template<class ContainerAllocator>
struct DataType< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agar_navigation/RobotStatusSrvResponse";
  }

  static const char* value(const ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool auto_move\n"
"int16 robot_speed\n"
"int16 tenk_speed\n"
"bool imu_connected\n"
"string imu_model_name\n"
"\n"
;
  }

  static const char* value(const ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.auto_move);
      stream.next(m.robot_speed);
      stream.next(m.tenk_speed);
      stream.next(m.imu_connected);
      stream.next(m.imu_model_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStatusSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agar_navigation::RobotStatusSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "auto_move: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_move);
    s << indent << "robot_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.robot_speed);
    s << indent << "tenk_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.tenk_speed);
    s << indent << "imu_connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_connected);
    s << indent << "imu_model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.imu_model_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGAR_NAVIGATION_MESSAGE_ROBOTSTATUSSRVRESPONSE_H
