// Generated by gencpp from file agar_navigation/motor_status.msg
// DO NOT EDIT!


#ifndef AGAR_NAVIGATION_MESSAGE_MOTOR_STATUS_H
#define AGAR_NAVIGATION_MESSAGE_MOTOR_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agar_navigation/controller_status.h>
#include <agar_navigation/controller_status.h>
#include <agar_navigation/controller_status.h>
#include <agar_navigation/controller_status.h>

namespace agar_navigation
{
template <class ContainerAllocator>
struct motor_status_
{
  typedef motor_status_<ContainerAllocator> Type;

  motor_status_()
    : motor_fl()
    , motor_rl()
    , motor_fr()
    , motor_rr()  {
    }
  motor_status_(const ContainerAllocator& _alloc)
    : motor_fl(_alloc)
    , motor_rl(_alloc)
    , motor_fr(_alloc)
    , motor_rr(_alloc)  {
  (void)_alloc;
    }



   typedef  ::agar_navigation::controller_status_<ContainerAllocator>  _motor_fl_type;
  _motor_fl_type motor_fl;

   typedef  ::agar_navigation::controller_status_<ContainerAllocator>  _motor_rl_type;
  _motor_rl_type motor_rl;

   typedef  ::agar_navigation::controller_status_<ContainerAllocator>  _motor_fr_type;
  _motor_fr_type motor_fr;

   typedef  ::agar_navigation::controller_status_<ContainerAllocator>  _motor_rr_type;
  _motor_rr_type motor_rr;





  typedef boost::shared_ptr< ::agar_navigation::motor_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agar_navigation::motor_status_<ContainerAllocator> const> ConstPtr;

}; // struct motor_status_

typedef ::agar_navigation::motor_status_<std::allocator<void> > motor_status;

typedef boost::shared_ptr< ::agar_navigation::motor_status > motor_statusPtr;
typedef boost::shared_ptr< ::agar_navigation::motor_status const> motor_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agar_navigation::motor_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agar_navigation::motor_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agar_navigation::motor_status_<ContainerAllocator1> & lhs, const ::agar_navigation::motor_status_<ContainerAllocator2> & rhs)
{
  return lhs.motor_fl == rhs.motor_fl &&
    lhs.motor_rl == rhs.motor_rl &&
    lhs.motor_fr == rhs.motor_fr &&
    lhs.motor_rr == rhs.motor_rr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agar_navigation::motor_status_<ContainerAllocator1> & lhs, const ::agar_navigation::motor_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agar_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agar_navigation::motor_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agar_navigation::motor_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agar_navigation::motor_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agar_navigation::motor_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agar_navigation::motor_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agar_navigation::motor_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agar_navigation::motor_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08247c79e285da734d9f769281d95300";
  }

  static const char* value(const ::agar_navigation::motor_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08247c79e285da73ULL;
  static const uint64_t static_value2 = 0x4d9f769281d95300ULL;
};

template<class ContainerAllocator>
struct DataType< ::agar_navigation::motor_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agar_navigation/motor_status";
  }

  static const char* value(const ::agar_navigation::motor_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agar_navigation::motor_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller_status motor_fl\n"
"controller_status motor_rl\n"
"controller_status motor_fr\n"
"controller_status motor_rr\n"
"================================================================================\n"
"MSG: agar_navigation/controller_status\n"
"uint16 rpm\n"
"uint16 phaseCurrent\n"
"uint8 batteryVoltage\n"
"uint8 controllerTemp\n"
"bool reverse\n"
"uint8 brakePedal\n"
"uint8 brakeSwitch\n"
"uint8 footSwitch\n"
;
  }

  static const char* value(const ::agar_navigation::motor_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agar_navigation::motor_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_fl);
      stream.next(m.motor_rl);
      stream.next(m.motor_fr);
      stream.next(m.motor_rr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agar_navigation::motor_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agar_navigation::motor_status_<ContainerAllocator>& v)
  {
    s << indent << "motor_fl: ";
    s << std::endl;
    Printer< ::agar_navigation::controller_status_<ContainerAllocator> >::stream(s, indent + "  ", v.motor_fl);
    s << indent << "motor_rl: ";
    s << std::endl;
    Printer< ::agar_navigation::controller_status_<ContainerAllocator> >::stream(s, indent + "  ", v.motor_rl);
    s << indent << "motor_fr: ";
    s << std::endl;
    Printer< ::agar_navigation::controller_status_<ContainerAllocator> >::stream(s, indent + "  ", v.motor_fr);
    s << indent << "motor_rr: ";
    s << std::endl;
    Printer< ::agar_navigation::controller_status_<ContainerAllocator> >::stream(s, indent + "  ", v.motor_rr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGAR_NAVIGATION_MESSAGE_MOTOR_STATUS_H
